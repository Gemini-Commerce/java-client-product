/*
 * Product Service
 * API for managing products
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.EntitymanagerAttributeOptionSwatch;
import org.openapitools.client.model.ProductentitymanagerLocalizedText;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import GeminiCommerce_Product.JSON;

/**
 * EntitymanagerAttributeOption
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-02-29T10:49:30.026307733Z[Etc/UTC]")
public class EntitymanagerAttributeOption {
  public static final String SERIALIZED_NAME_OPTION = "option";
  @SerializedName(SERIALIZED_NAME_OPTION)
  private Map<String, String> option = new HashMap<>();

  public static final String SERIALIZED_NAME_SORT = "sort";
  @SerializedName(SERIALIZED_NAME_SORT)
  private Long sort;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private ProductentitymanagerLocalizedText value;

  public static final String SERIALIZED_NAME_SWATCHES = "swatches";
  @SerializedName(SERIALIZED_NAME_SWATCHES)
  private List<EntitymanagerAttributeOptionSwatch> swatches;

  public EntitymanagerAttributeOption() {
  }

  public EntitymanagerAttributeOption option(Map<String, String> option) {
    this.option = option;
    return this;
  }

  public EntitymanagerAttributeOption putOptionItem(String key, String optionItem) {
    if (this.option == null) {
      this.option = new HashMap<>();
    }
    this.option.put(key, optionItem);
    return this;
  }

   /**
   * Get option
   * @return option
  **/
  @javax.annotation.Nullable
  public Map<String, String> getOption() {
    return option;
  }

  public void setOption(Map<String, String> option) {
    this.option = option;
  }


  public EntitymanagerAttributeOption sort(Long sort) {
    this.sort = sort;
    return this;
  }

   /**
   * Get sort
   * @return sort
  **/
  @javax.annotation.Nullable
  public Long getSort() {
    return sort;
  }

  public void setSort(Long sort) {
    this.sort = sort;
  }


  public EntitymanagerAttributeOption id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public EntitymanagerAttributeOption code(String code) {
    this.code = code;
    return this;
  }

   /**
   * Get code
   * @return code
  **/
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public EntitymanagerAttributeOption value(ProductentitymanagerLocalizedText value) {
    this.value = value;
    return this;
  }

   /**
   * Get value
   * @return value
  **/
  @javax.annotation.Nullable
  public ProductentitymanagerLocalizedText getValue() {
    return value;
  }

  public void setValue(ProductentitymanagerLocalizedText value) {
    this.value = value;
  }


  public EntitymanagerAttributeOption swatches(List<EntitymanagerAttributeOptionSwatch> swatches) {
    this.swatches = swatches;
    return this;
  }

  public EntitymanagerAttributeOption addSwatchesItem(EntitymanagerAttributeOptionSwatch swatchesItem) {
    if (this.swatches == null) {
      this.swatches = new ArrayList<>();
    }
    this.swatches.add(swatchesItem);
    return this;
  }

   /**
   * Get swatches
   * @return swatches
  **/
  @javax.annotation.Nullable
  public List<EntitymanagerAttributeOptionSwatch> getSwatches() {
    return swatches;
  }

  public void setSwatches(List<EntitymanagerAttributeOptionSwatch> swatches) {
    this.swatches = swatches;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EntitymanagerAttributeOption entitymanagerAttributeOption = (EntitymanagerAttributeOption) o;
    return Objects.equals(this.option, entitymanagerAttributeOption.option) &&
        Objects.equals(this.sort, entitymanagerAttributeOption.sort) &&
        Objects.equals(this.id, entitymanagerAttributeOption.id) &&
        Objects.equals(this.code, entitymanagerAttributeOption.code) &&
        Objects.equals(this.value, entitymanagerAttributeOption.value) &&
        Objects.equals(this.swatches, entitymanagerAttributeOption.swatches);
  }

  @Override
  public int hashCode() {
    return Objects.hash(option, sort, id, code, value, swatches);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EntitymanagerAttributeOption {\n");
    sb.append("    option: ").append(toIndentedString(option)).append("\n");
    sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    swatches: ").append(toIndentedString(swatches)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("option");
    openapiFields.add("sort");
    openapiFields.add("id");
    openapiFields.add("code");
    openapiFields.add("value");
    openapiFields.add("swatches");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EntitymanagerAttributeOption
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EntitymanagerAttributeOption.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EntitymanagerAttributeOption is not found in the empty JSON string", EntitymanagerAttributeOption.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EntitymanagerAttributeOption.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EntitymanagerAttributeOption` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      // validate the optional field `value`
      if (jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) {
        ProductentitymanagerLocalizedText.validateJsonElement(jsonObj.get("value"));
      }
      if (jsonObj.get("swatches") != null && !jsonObj.get("swatches").isJsonNull()) {
        JsonArray jsonArrayswatches = jsonObj.getAsJsonArray("swatches");
        if (jsonArrayswatches != null) {
          // ensure the json data is an array
          if (!jsonObj.get("swatches").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `swatches` to be an array in the JSON string but got `%s`", jsonObj.get("swatches").toString()));
          }

          // validate the optional field `swatches` (array)
          for (int i = 0; i < jsonArrayswatches.size(); i++) {
            EntitymanagerAttributeOptionSwatch.validateJsonElement(jsonArrayswatches.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EntitymanagerAttributeOption.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EntitymanagerAttributeOption' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EntitymanagerAttributeOption> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EntitymanagerAttributeOption.class));

       return (TypeAdapter<T>) new TypeAdapter<EntitymanagerAttributeOption>() {
           @Override
           public void write(JsonWriter out, EntitymanagerAttributeOption value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EntitymanagerAttributeOption read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EntitymanagerAttributeOption given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EntitymanagerAttributeOption
  * @throws IOException if the JSON string is invalid with respect to EntitymanagerAttributeOption
  */
  public static EntitymanagerAttributeOption fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EntitymanagerAttributeOption.class);
  }

 /**
  * Convert an instance of EntitymanagerAttributeOption to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

