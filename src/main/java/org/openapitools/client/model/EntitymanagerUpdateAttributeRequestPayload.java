/*
 * Product Service
 * API for managing products
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.EntitymanagerRenderAs;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import GeminiCommerce_Product.JSON;

/**
 * EntitymanagerUpdateAttributeRequestPayload
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-02-29T10:49:30.026307733Z[Etc/UTC]")
public class EntitymanagerUpdateAttributeRequestPayload {
  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_DEFAULT = "default";
  @SerializedName(SERIALIZED_NAME_DEFAULT)
  private String _default;

  public static final String SERIALIZED_NAME_SORT = "sort";
  @SerializedName(SERIALIZED_NAME_SORT)
  private Integer sort;

  public static final String SERIALIZED_NAME_GROUP_CODE = "groupCode";
  @SerializedName(SERIALIZED_NAME_GROUP_CODE)
  private String groupCode;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private Map<String, String> title = new HashMap<>();

  public static final String SERIALIZED_NAME_RENDER_AS = "renderAs";
  @SerializedName(SERIALIZED_NAME_RENDER_AS)
  private EntitymanagerRenderAs renderAs = EntitymanagerRenderAs.DEFAULT;

  public EntitymanagerUpdateAttributeRequestPayload() {
  }

  public EntitymanagerUpdateAttributeRequestPayload label(String label) {
    this.label = label;
    return this;
  }

   /**
   * Get label
   * @return label
  **/
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public EntitymanagerUpdateAttributeRequestPayload _default(String _default) {
    this._default = _default;
    return this;
  }

   /**
   * Get _default
   * @return _default
  **/
  @javax.annotation.Nullable
  public String getDefault() {
    return _default;
  }

  public void setDefault(String _default) {
    this._default = _default;
  }


  public EntitymanagerUpdateAttributeRequestPayload sort(Integer sort) {
    this.sort = sort;
    return this;
  }

   /**
   * Get sort
   * @return sort
  **/
  @javax.annotation.Nullable
  public Integer getSort() {
    return sort;
  }

  public void setSort(Integer sort) {
    this.sort = sort;
  }


  public EntitymanagerUpdateAttributeRequestPayload groupCode(String groupCode) {
    this.groupCode = groupCode;
    return this;
  }

   /**
   * Get groupCode
   * @return groupCode
  **/
  @javax.annotation.Nullable
  public String getGroupCode() {
    return groupCode;
  }

  public void setGroupCode(String groupCode) {
    this.groupCode = groupCode;
  }


  public EntitymanagerUpdateAttributeRequestPayload title(Map<String, String> title) {
    this.title = title;
    return this;
  }

  public EntitymanagerUpdateAttributeRequestPayload putTitleItem(String key, String titleItem) {
    if (this.title == null) {
      this.title = new HashMap<>();
    }
    this.title.put(key, titleItem);
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nullable
  public Map<String, String> getTitle() {
    return title;
  }

  public void setTitle(Map<String, String> title) {
    this.title = title;
  }


  public EntitymanagerUpdateAttributeRequestPayload renderAs(EntitymanagerRenderAs renderAs) {
    this.renderAs = renderAs;
    return this;
  }

   /**
   * Get renderAs
   * @return renderAs
  **/
  @javax.annotation.Nullable
  public EntitymanagerRenderAs getRenderAs() {
    return renderAs;
  }

  public void setRenderAs(EntitymanagerRenderAs renderAs) {
    this.renderAs = renderAs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EntitymanagerUpdateAttributeRequestPayload entitymanagerUpdateAttributeRequestPayload = (EntitymanagerUpdateAttributeRequestPayload) o;
    return Objects.equals(this.label, entitymanagerUpdateAttributeRequestPayload.label) &&
        Objects.equals(this._default, entitymanagerUpdateAttributeRequestPayload._default) &&
        Objects.equals(this.sort, entitymanagerUpdateAttributeRequestPayload.sort) &&
        Objects.equals(this.groupCode, entitymanagerUpdateAttributeRequestPayload.groupCode) &&
        Objects.equals(this.title, entitymanagerUpdateAttributeRequestPayload.title) &&
        Objects.equals(this.renderAs, entitymanagerUpdateAttributeRequestPayload.renderAs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(label, _default, sort, groupCode, title, renderAs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EntitymanagerUpdateAttributeRequestPayload {\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    _default: ").append(toIndentedString(_default)).append("\n");
    sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    sb.append("    groupCode: ").append(toIndentedString(groupCode)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    renderAs: ").append(toIndentedString(renderAs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("label");
    openapiFields.add("default");
    openapiFields.add("sort");
    openapiFields.add("groupCode");
    openapiFields.add("title");
    openapiFields.add("renderAs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EntitymanagerUpdateAttributeRequestPayload
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EntitymanagerUpdateAttributeRequestPayload.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EntitymanagerUpdateAttributeRequestPayload is not found in the empty JSON string", EntitymanagerUpdateAttributeRequestPayload.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EntitymanagerUpdateAttributeRequestPayload.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EntitymanagerUpdateAttributeRequestPayload` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("default") != null && !jsonObj.get("default").isJsonNull()) && !jsonObj.get("default").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default").toString()));
      }
      if ((jsonObj.get("groupCode") != null && !jsonObj.get("groupCode").isJsonNull()) && !jsonObj.get("groupCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupCode").toString()));
      }
      // validate the optional field `renderAs`
      if (jsonObj.get("renderAs") != null && !jsonObj.get("renderAs").isJsonNull()) {
        EntitymanagerRenderAs.validateJsonElement(jsonObj.get("renderAs"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EntitymanagerUpdateAttributeRequestPayload.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EntitymanagerUpdateAttributeRequestPayload' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EntitymanagerUpdateAttributeRequestPayload> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EntitymanagerUpdateAttributeRequestPayload.class));

       return (TypeAdapter<T>) new TypeAdapter<EntitymanagerUpdateAttributeRequestPayload>() {
           @Override
           public void write(JsonWriter out, EntitymanagerUpdateAttributeRequestPayload value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EntitymanagerUpdateAttributeRequestPayload read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EntitymanagerUpdateAttributeRequestPayload given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EntitymanagerUpdateAttributeRequestPayload
  * @throws IOException if the JSON string is invalid with respect to EntitymanagerUpdateAttributeRequestPayload
  */
  public static EntitymanagerUpdateAttributeRequestPayload fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EntitymanagerUpdateAttributeRequestPayload.class);
  }

 /**
  * Convert an instance of EntitymanagerUpdateAttributeRequestPayload to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

